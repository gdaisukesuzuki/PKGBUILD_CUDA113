# Maintainer: Sven-Hendrik Haase <svenstaro@gmail.com>
# Contributor: bartus <arch-user-repoá˜“bartus.33mail.com>
# Contributor: pingplug <pingplug@foxmail.com>
# Contributor: cornholio <vigo.the.unholy.carpathian@gmail.com>

pkgname=(python-cudf)
_pkgname=cudf
pkgver=0.19.2
pkgrel=2
pkgdesc="RAPIDS Memory Manager"
arch=('x86_64')
url="https://rapids.ai/"
license=('custom')
depends=('python-rmm' 'python-pyarrow' 'python-dask-cuda' 'arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'cudf' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cuda-tools' 'cuda-static' 'cmake' 'python-rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda<1.0.0' 'python-pyarrow-cuda' 'gcc9' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf' 'python-versioneer')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf')
# makedepends=('python-cmake_setuptools' 'protobuf-static')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs')
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git"
source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#tag=v0.19.0" "cu.patch"
"setup.py.patch"
"https://raw.githubusercontent.com/dmlc/dlpack/main/include/dlpack/dlpack.h"
"build.sh.patch"
)

#  "orc.hpp.patch"
#  "remove_keys.cu.patch"
#  "from.arrow.cu.patch"
#  "cudf_setup.py.patch" "gather.cu.patch" "ipc.cpp.patch" "reader_impl.cu.patch")
#  "cudf_setup.py.patch" "nvst_CMakeLists.txt.patch")
#  "from_arrow.cpp.patch"

# sha256sums=('SKIP' 'SKIP')
# sha256sums=('SKIP')
sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP')


prepare() {
  cd "${srcdir}"
  mkdir "${srcdir}"/cudf/cpp/include/dlpack
  cp "${srcdir}"/dlpack.h  "${srcdir}"/cudf/cpp/include/dlpack
  patch -p0 < cu.patch
  patch -p0 < setup.py.patch
  patch -p0 < build.sh.patch
#   patch -p0 < nvst_CMakeLists.txt.patch
#   patch -p0 < gather.cu.patch 
#   patch -p0 < orc.hpp.patch 
#  patch -p0 < cpp.patch
#  patch -p0 < cudf_setup.py.patch
#  patch -p0 < from_arrow.cpp.patch
#   patch -p0 < reader_impl.cu.patch
#   patch -p0 <  from.arrow.cu.patch
#    patch -p0 < ipc.cpp.patch
export VERBOSE_FLAG="-v"
export BUILD_TYPE=Release
export INSTALL_TARGET=install
export BUILD_BENCHMARKS=OFF
export BUILD_ALL_GPU_ARCH=0
export BUILD_NVTX=ON
export BUILD_TESTS=OFF
export BUILD_DISABLE_DEPRECATION_WARNING=ON
export BUILD_PER_THREAD_DEFAULT_STREAM=OFF
export INSTALL_PREFIX="${pkgdir}"/usr
export PARALLEL_LEVEL=$(nproc)
  export CUDF_ROOT="${srcdir}"/cudf/cpp/build
  export LD_LIBRARY_PATH="${srcdir}"/cudf/cpp/build:$LD_LIBRARY_PATH
export CC=/usr/bin/gcc-10
export CXX=/usr/bin/g++-10
}

build() {
  cd "${srcdir}/cudf/python/cudf"
  # ./build.sh clean
#  ./build.sh --disable_nvtx -v -n libcudf cudf dask_cudf
  export LD_LIBRARY_PATH=/opt/cuda/lib64:${srcdir}/rmm/build:$LD_LIBRARY_PATH
CFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CXXFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext --inplace -j${PARALLEL_LEVEL}


  cd "${srcdir}/cudf/python/dask_cudf"
  export LD_LIBRARY_PATH=/opt/cuda/lib64:${srcdir}/rmm/build:$LD_LIBRARY_PATH
CFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CXXFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext --inplace -j${PARALLEL_LEVEL}
}

package_python-cudf()
{
  cd "${srcdir}"/cudf/python/cudf
  
  export LD_LIBRARY_PATH=/opt/cuda/lib64:${srcdir}/rmm/build:$LD_LIBRARY_PATH
CFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CXXFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1

  cd "${srcdir}"/cudf/python/dask_cudf
CFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CXXFLAGS="-march=skylake-avx512 -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1

  # install -Dm644 ${srcdir}/cudf/cpp/src/utilities/legacy/*.hpp ${pkgdir}/usr/include/cudf/utilities/legacy/
  install -Dm644 ${srcdir}/cudf/LICENSE ${pkgdir}/usr/share/licenses/python-cudf/LICENSE

}

# vim:set ts=2 sw=2 et:
