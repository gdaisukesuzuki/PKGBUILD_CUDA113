# Maintainer: Sven-Hendrik Haase <svenstaro@gmail.com>
# Contributor: bartus <arch-user-repoá˜“bartus.33mail.com>
# Contributor: pingplug <pingplug@foxmail.com>
# Contributor: cornholio <vigo.the.unholy.carpathian@gmail.com>

pkgname=(cuml python-cuml)
_pkgname=cuml
pkgver=0.19.0
pkgrel=3
pkgdesc="RAPIDS Memory Manager"
arch=('x86_64')
url="https://rapids.ai/"
license=('custom')
depends=('faiss-cuda' 'cudf' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf' 'treelite' 'cumlprims')
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cuda-tools' 'cuda-static' 'cmake' 'python-rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda<1.0.0' 'python-pyarrow-cuda' 'gcc9' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf' 'python-versioneer')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf')
# makedepends=('python-cmake_setuptools' 'protobuf-static')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs')
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git"
source=("${_pkgname}::git+https://github.com/rapidsai/cuml.git#tag=v0.19.0" "cu.patch" "setup.py.patch")
# source=("${_pkgname}::git+https://github.com/rapidsai/cuml.git#tag=v0.19.0")
#  "orc.hpp.patch"
#  "remove_keys.cu.patch"
#  "from.arrow.cu.patch"
#  "cudf_setup.py.patch" "gather.cu.patch" "ipc.cpp.patch" "reader_impl.cu.patch")
#  "cudf_setup.py.patch" "nvst_CMakeLists.txt.patch")
#  "from_arrow.cpp.patch"

# sha256sums=('SKIP' 'SKIP')
# sha256sums=('SKIP')
sha256sums=('SKIP' 'SKIP' 'SKIP')


prepare() {
  cd "${srcdir}"
  patch -p0 < cu.patch
  patch -p0 < setup.py.patch
#   patch -p0 < nvst_CMakeLists.txt.patch
#   patch -p0 < gather.cu.patch 
#   patch -p0 < orc.hpp.patch 
#  patch -p0 < cpp.patch
#  patch -p0 < cudf_setup.py.patch
#  patch -p0 < from_arrow.cpp.patch
#   patch -p0 < reader_impl.cu.patch
#   patch -p0 <  from.arrow.cu.patch
#    patch -p0 < ipc.cpp.patch
export ENABLE_CUMLPRIMS_MG=OFF
export SINGLEGPU=OFF
export VERBOSE=1
export BUILD_TYPE=Release
export INSTALL_TARGET=install
export BUILD_ALL_GPU_ARCH=0
export CUML_EXTRA_PYTHON_ARGS=""
export NVTX=OFF
export CCACHE=OFF
export CLEAN=0
export BUILD_DISABLE_DEPRECATION_WARNING=ON
export BUILD_CUML_STD_COMMS=ON
export BUILD_CPP_MG_TESTS=OFF
export BUILD_STATIC_FAISS=OFF
export CMAKE_GENERATOR="Ninja"
export SINGLEGPU_CPP_FLAG=OFF
export LIBCUML_BUILD_DIR="${srcdir}"/cuml/cpp/build
export CUML_EXTRA_CMAKE_ARGS=""
export INSTALL_PREFIX=/usr
export PARALLEL_LEVEL=$(nproc)
export CUDA_HOME=/opt/cuda
export CFLAGS="-march=skylake -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection"
export CC=/usr/bin/gcc-10
export CXX=/usr/bin/g++-10
export CXXFLAGS="$CFLAGS"
  
find cuml/python/cuml -name '*.py' | xargs sed -i -e 's/cp.core.core.ndarray/cp._core.core.ndarray/g'
find cuml/python/cuml -name '*.py' | xargs sed -i -e 's/sklearn.manifold.t_sne/sklearn.manifold/g'

}

build() {
  cd "${srcdir}/cuml"
  # ./build.sh clean
#  ./build.sh --disable_nvtx -v -n libcudf cudf dask_cudf

    export GPU_ARCH=""
    mkdir -p ${LIBCUML_BUILD_DIR}
    cd ${LIBCUML_BUILD_DIR}

    cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
          -DBLAS_LIBRARIES="${INSTALL_PREFIX}/lib/libopenblas.so.0;${INSTALL_PREFIX}/lib/liblapack.so.3" \
          ${GPU_ARCH} \
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -DBUILD_CUML_BENCH=OFF \
          -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-10 \
          -DBUILD_CUML_PRIMS_BENCH=OFF \
          -DBUILD_CUML_C_LIBRARY=ON \
          -DSINGLEGPU=${SINGLEGPU_CPP_FLAG} \
          -DCMAKE_C_COMPILER=/usr/bin/gcc-10 \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
          -DWITH_UCX=ON  \
          -DBUILD_CUML_MPI_COMMS=${BUILD_CPP_MG_TESTS} \
          -DBUILD_CUML_MG_TESTS=${BUILD_CPP_MG_TESTS} \
          -DBUILD_STATIC_FAISS=${BUILD_STATIC_FAISS} \
          -DNVTX=${NVTX} \
          -DPARALLEL_LEVEL=${PARALLEL_LEVEL} \
          -DUSE_CCACHE=${CCACHE} \
          -DNCCL_PATH=${INSTALL_PREFIX} \
          -DDISABLE_DEPRECATION_WARNING=${BUILD_DISABLE_DEPRECATION_WARNING} \
          -DCMAKE_PREFIX_PATH=${INSTALL_PREFIX} \
          ${CUML_EXTRA_CMAKE_ARGS} \
          ..

#  ./build.sh -v -n --singlegpu libcuml
#    sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libtreelite.so/g' CMakeFiles/cuml++.dir/link.txt

#     find ../.. -name link.txt | xargs sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libfmt.so\ \/usr\/lib\/libtreelite.so/g'
    
    sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libtreelite.so/g' build.ninja
    sed -i -e 's/\-lgomp/\-lgomp\ \-lfmt/g' build.ninja
   # cmake   --build ${LIBCUML_BUILD_DIR} -v -j10 --target cuml++ cuml ml

}

package_cuml() {
    cd ${LIBCUML_BUILD_DIR}
  # cd "${srcdir}"/cuml/cpp/build

  # make DESTDIR="${pkgdir}" install_cudf
CFLAGS="-march=skylake -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
CXXFLAGS="-march=skylake -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
 DESTDIR="${pkgdir}" cmake --build ${LIBCUML_BUILD_DIR} -v -j${PARALLEL_LEVEL:-1} --target cuml++ cuml ml install
 rm -rf "${pkgdir}"/home
 # cmake --build . -j$(nproc) --target install 
# make  install DESTDIR="${pkgdir}/usr"


  install -Dm644 ${srcdir}/cuml/LICENSE ${pkgdir}/usr/share/licenses/cuml/LICENSE

}

package_python-cuml()
{
  depends=('python-faiss-cuda' 'python-cudf' 'python-treelite' 'cumlprims')
  cd "${srcdir}/cuml/python"
  
CFLAGS="-march=skylake -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
CC=/usr/bin/gcc-10 \
CXX=/usr/bin/g++-10 \
CXXFLAGS="-march=skylake -mtune=native -DSPDLOG_FMT_EXTERNAL -O3 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS \
        -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection" \
  CUDA_HOME=/opt/cuda LD_LIBRARY_PATH=/opt/cuda/lib64:${LD_LIBRARY_PATH} python setup.py build_ext -j${PARALLEL_LEVEL:-1} ${CUML_EXTRA_PYTHON_ARGS} --library-dir=${LIBCUML_BUILD_DIR} install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}"

  # install -Dm644 ${srcdir}/cudf/cpp/src/utilities/legacy/*.hpp ${pkgdir}/usr/include/cudf/utilities/legacy/
  install -Dm644 ${srcdir}/cuml/LICENSE ${pkgdir}/usr/share/licenses/python-cuml/LICENSE

}


# vim:set ts=2 sw=2 et:
